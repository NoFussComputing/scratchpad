---

name: Check Commit Messages


on:
  push:
    branches:
      - development


jobs:

  Commit-Message-Check:
    runs-on: ubuntu-latest
    name: Check Commit Format
    steps:


      - uses: actions/checkout@v2



      # - name: Preperation
      #   run: |
      #     sudo apt update;
      #     sudo apt install --no-install-recommends -y git;
      #     # python3 -m venv env;
      #     # . env/bin/activate;
      #     # pip install --upgrade pip;


      - uses: actions/setup-python@v1

      - name: Setup
        run: |
          git fetch --all;
          # git checkout --track origin/development;
          git show-branch -a;
          target_branch=$(git show-branch -a | awk 'BEGIN { FS="\n\\s+*" } { print $1 }' | awk '{print $2}' | grep '\[' | sed 's/.*\[origin\/\(.*\)\].*/\1/' | grep -v '\[' | grep -v $(git rev-parse --abbrev-ref HEAD) | grep -vi 'HEAD' | awk 'BEGIN{ RS = "" ; FS = "\n" }{print $1}');
          echo "[DEBUG] Target Branch[$target_branch]";
          # if [ -d "gitlab-ci" ]; then ls -la gitlab-ci; fi;
          first_sha1=$(git log origin/$target_branch..development --format=format:%H | tail -1);
          echo "[DEBUG] First Commit SHA[$first_sha1]";


          pip install -r requirements.txt;
          cz version;


          echo "[DEBUG] First Commit SHA[$first_sha1]";

          if [ "$(git log $first_sha1..HEAD --format=format:%H | wc -l)" -eq 0 ]; then
            echo "[DEBUG] Single Commit";
            cz_exit=0;
            cz check -m "$(git log HEAD --format=format:%B -1)" > "cz_output.log" 2>&1 || cz_exit=$?; 
          fi;

          if [ "$(git log $first_sha1..HEAD --format=format:%H | wc -l)" -gt 0 ]; then
            echo "[DEBUG] Commit range";
            cz_exit=0;
            cz check --rev-range $first_sha1..HEAD > "cz_output.log" 2>&1 || cz_exit=$?;
          fi;

          echo "[DEBUG] cz_exit[$cz_exit]";

          export cz_exit=$cz_exit


          echo "**********************************";
          ls -la;
          echo "**********************************";
          git status;
          echo "**********************************";
          cat cz_output.log;
          echo "**********************************";
          cat ./.github/workflows/cz_junit.sh
          echo "**********************************";
          echo "[DEBUG] cz_exit[$cz_exit]";
          ./.github/workflows/cz_junit.sh > cz.junit.xml;
          echo "**********************************";
          ls -la;
          echo "**********************************";


      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()    # run this step even if previous step failed
        with:
          name: Commit Messages            # Name of the check run which will be created
          path: cz.junit.xml    # Path to test results
          reporter: java-junit        # Format of test results
