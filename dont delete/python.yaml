---

name: 'Python'


on:
  workflow_call:
    # inputs:
    #   DOCKER_BUILD_REGISTRY:
    #     default: "ghcr.io"
    #     description: Registry where build image will live
    #     required: false
    #     type: string


# permissions:
#   pull-requests: write
#   contents: write
#   actions: read
#   checks: write
#   packages: write
#   security-events: write
#   statuses: write
#   id-token: write
#   attestations: write

jobs:


  requirements-scan-vulnerability:
    if:
      (${{
        (
          github.event.push
            ||
          github.ref_type == 'tag'
        )
          &&
        inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
      }})

    # needs:
    #   - docker-build
    runs-on: ubuntu-latest
    name: Vulnerability Scan
    steps:
      - uses: actions/checkout@v4



      - name: Run Trivy vulnerability scanner (sarif Report)
        # if:
        #   (${{
        #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
        #   }})
        uses: aquasecurity/trivy-action@0.20.0
        with:
          # image-ref: '${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}'
          scan-type: 'fs'
          scan-ref: 'requirements.txt'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'LOW,MEDIUM,HIGH,CRITICAL'
          vuln-type: 'library'
          scanners: vuln
          ignore-unfixed: true


      - name: Upload Trivy Vulnerability Scan as a release asset
        if: ${{ github.ref_type == 'tag' }}
        uses: mkatanski/release-files-action@v1.1.3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-tag: ${{ github.ref_name }}
          name: "trivy-vulnerability-scan.sarif"
          file-path: trivy-results.sarif


      - name: Upload Trivy scan results to GitHub Security tab
        # if:
        #   (${{
        #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
        #   }})
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'


      - name: Run Trivy vulnerability scanner (json Report)
        # if:
        #   (${{
        #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
        #   }})
        uses: aquasecurity/trivy-action@0.20.0
        with:
          # image-ref: '${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}'
          scan-type: 'fs'
          scan-ref: 'requirements.txt'
          format: 'json'
          output: 'scan-results.json'
          severity: 'LOW,MEDIUM,HIGH,CRITICAL'
          vuln-type: 'library'
          scanners: vuln
          ignore-unfixed: false

      - name: Upload scan results
        # if:
        #   (${{
        #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
        #   }})
        uses: actions/upload-artifact@v4
        with:
          name: requirements-scan-results-json
          path: scan-results.json


      - run: |
          ls -la

      - name: Create Vulnerabilities (Critical/High)
        # if:
        #   (${{
        #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
        #   }})
        run: |
          if [ "$(jq -r '.Results')" ]; then

            not_empty="$(jq -r '.Results[] | .Vulnerabilities[]' scan-results.json)";

          else

            not_empty="";

          fi

          jq -r '
          [
          "# PIP File Scan Results",
          "",
          "**Scan Date:** _" + ( .CreatedAt // "" ) + "_",
          "**File:** _" + ( .ArtifactName // "" ) + "_",
          ""
          ] | join("\n")
          ' scan-results.json > vulnerability-report.md

          if [ "$not_empty" ]; then
            jq -r '
            def hr(severity):
            if severity == "HIGH" or severity == "CRITICAL" then true else false end;
            def to_md:
            "| " + (.VulnerabilityID // "") + " | " + (.PkgName // "") + " | " + (.InstalledVersion // "") + " | " + (.Severity // "") + " | " + (.Title // "") + " |";
            [
            "## High and Critical Vulnerabilities",
            "",
            "| Vulnerability ID | Package | Version | Severity | Description |",
            "| --------- | ----- | ----- | ----- | -------|",
            (.Results[] | .Vulnerabilities[] | select(hr(.Severity)) | to_md),
            ""
            ] | join("\n")
            ' scan-results.json >> vulnerability-report.md

          else

            echo "**Nothing Found**" >> vulnerability-report.md

          fi;



      - name: Create Full Vulnerabilities
        # if:
        #   (${{
        #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
        #   }})
        run: |
          if [ "$(jq -r '.Results')" ]; then

            not_empty="$(jq -r '.Results[] | .Vulnerabilities[]' scan-results.json)";

          else

            not_empty="";

          fi


          jq -r '
          [
          "# Full PIP File Scan Results",
          "",
          "**Scan Date:** _" + ( .CreatedAt // "" ) + "_",
          "**File:** _" + ( .ArtifactName // "" ) + "_",
          ""
          ] | join("\n")
          ' scan-results.json > full-vulnerability-report.md

          if [ "$not_empty" ]; then
            jq -r '
            def hr(severity):
            if severity == "HIGH" or severity == "CRITICAL" then true else false end;
            def to_md:
            "| " + (.VulnerabilityID // "") + " | " + (.PkgName // "") + " | " + (.InstalledVersion // "") + " | " + (.Severity // "") + " | " + (.Title // "") + " |";
            [
            "## Vulnerabilities",
            "",
            "| Vulnerability ID | Package | Version | Severity | Description |",
            "| --------- | ----- | ----- | ----- | -------|",
            (.Results[] | .Vulnerabilities[] | select(.Severity) | to_md),
            ""
            ] | join("\n")
            ' scan-results.json >> full-vulnerability-report.md

          else

            echo "**Nothing Found**" >> full-vulnerability-report.md

          fi;


      - name: Upload scan results
        # if:
        #   (${{
        #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
        #   }})
        uses: actions/upload-artifact@v4
        with:
          name: python-vulnerability-report
          path: vulnerability-report.md

      - name: Upload scan results
        # if:
        #   (${{
        #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
        #   }})
        uses: actions/upload-artifact@v4
        with:
          name: python-vulnerability-report-full
          path: full-vulnerability-report.md




  requirements-pr-comment:
    if: ${{ github.ref_type != 'tag' }}
    needs:
      - requirements-scan-vulnerability
    runs-on: ubuntu-latest
    name: PR Comment (Vulnerability)
    steps:


      - name: Fetch Vulnerability Report
        # if: ${{ inputs.DOCKER_SCAN_IMAGE_VULNERABILITY }}
        uses: actions/download-artifact@v4
        with:
          name: python-vulnerability-report


      - name: Capture scan results
        # if: ${{ inputs.DOCKER_SCAN_IMAGE_VULNERABILITY }}
        run: |
          content=$(cat vulnerability-report.md | head -c 65000)
          echo "report<<EOF" >> $GITHUB_ENV
          echo "$content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: jwalton/gh-find-current-pr@v1
        id: finder

      - name: Comment scan results on PR
        # if: ${{ inputs.DOCKER_SCAN_IMAGE_VULNERABILITY }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ steps.finder.outputs.pr }}
          header: PIP File Scan Results
          message: |
            ${{ env.report }}




  python-reports:
    # if: ${{
    #     (
    #       github.event.push
    #         ||
    #       github.ref_type == 'tag'
    #     )
    #   }}
    needs: 
      - requirements-scan-vulnerability
    runs-on: ubuntu-latest
    name: Create Reports
    steps:


      # - name: Dummy Task
      #   # if: ${{
      #   #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY == false
      #   #   }}
      #   run: |
      #     echo "Scanning image turned off.This Job does nothing however as 'docker-scan-vulnerability' is a dependency job, must do something.";


      - name: Fetch Scan Results
        # if: ${{
        #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
        #   }}
        uses: actions/download-artifact@v4
        with:
          name: python-vulnerability-report-full


      - uses: dtinth/markdown-report-action@v1
        # if: ${{
        #     inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
        #   }}
        with:
          name: PIP File Vulnerability Report
          title: Vulnerability Report
          body-file: full-vulnerability-report.md

