---

name: 'NFC Docker'

description: Docker workflow

inputs:
  DOCKER_BUILD_REGISTRY:
    default: "ghcr.io"
    description: Registry where build image will live
    required: false
    # type: string
  DOCKER_BUILD_IMAGE_NAME:
    default: "${{ github.repository }}"
    description: Docker image name for building image
    required: false
    # type: string
  DOCKER_BUILD_IMAGE_TAG:
    default: "${{ github.sha }}"
    description: Docker image tag for building image
    required: false
    # type: string
  DOCKER_FILE:
    default: "dockerfile"
    description: Path to the dockerfile
    required: false
    # type: string
  DOCKER_LABEL_ARTIFACTHUB_MAINTAINER:
    default: '[{"name":"No Fuss Computing","email":"helpdesk@nofusscomputing.com"}]'
    description: Artifact hub Maintainer
    required: false
    # type: string
  DOCKER_LABEL_ARTIFACTHUB_README:
    default: 'https://raw.githubusercontent.com/${{ github.repository }}/development/README.md'
    description: Artifact hub ReadMe
    required: false
    # type: string
  DOCKER_PUBLISH_REGISTRY:
    default: "docker.io"
    description: Registry where image will be published to
    required: false
    # type: string
  DOCKER_PUBLISH_IMAGE_NAME:
    default: "${{ github.repository }}"
    description: Docker image name for publishing the image
    required: false
    # type: string
  DOCKER_SCAN_IMAGE_VULNERABILITY:
    default: 'true'
    description: Scan Image with Trivy
    required: false
    # type: boolean
  DOCKER_TAG_IMAGE_TAG_SOURCE:
    default: "${{ github.sha }}"
    description: Docker image tag Used for source Image to tag
    required: false
    # type: string
  DOCKER_TAG_IMAGE_TAG_LATEST:
    default: 'true'
    description: Create image with tag 'Latest'
    required: false
    # type: boolean
  DOCKER_TAG_IMAGE_TAG_SHA:
    default: 'true'
    description: Create image with tag that is the git commit
    required: false
    # type: boolean


# permissions:
#   pull-requests: write
#   contents: write
#   actions: read
#   checks: write
#   packages: write
#   security-events: write
#   statuses: write
#   id-token: write
#   attestations: write

runs:
  using: "composite"
  steps:

  # docker-build:
  # - if:
  #     (${{
  #       github.event.push
  #         ||
  #       github.ref_type == 'tag'
  #     }})
  #   # runs-on: ubuntu-latest
  #   name: Build Image
  #   # outputs:
  #   #   build-image-digest: ${{ steps.image-digest.outputs.value-out }}
  #   steps:

    - name: Docker
      uses: nofusscomputing/scratchpad/.github/workflows/docker.yaml@development

      # - name: Debug
      #   shell: bash
      #   run: |
      #     echo "${{ github.event.pull_request.head.repo.full_name || github.repository }}";
      #     echo "**************************";
      #     echo "${{ github.event.pull_request.head.repo.full_name }}";
      #     echo "**************************";
      #     echo "${{ github.repository }}";
      #     echo "**************************";
      #     echo "${{ github.event.pull_request.head.repo }}";
      #     echo "**************************";
      #     echo "${{ github.event.push }}";
      #     echo "**************************";
      # - uses: actions/checkout@v4

      # - name: Dummy Task
      #   shell: bash
      #   if: ${{ github.ref_type == 'tag' }}
      #   run: |
      #     echo "This Job does nothing however as 'docker-build' is a dependency job, must do something.";



      # - name: Log into registry ghcr.io
      #   uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
      #   with:
      #     registry: ghcr.io
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}


      # - name: Setup BuildX
      #   shell: bash
      #   if: ${{ github.ref_type != 'tag' }}
      #   run: |
      #     docker buildx create --name project-v3-builder;
      #     docker buildx use project-v3-builder;


      # - name: build image
      #   shell: bash
      #   if: ${{ github.ref_type != 'tag' }}
      #   run: |
      #     docker buildx build --platform="linux/amd64,linux/arm64" . \
      #       --label "org.opencontainers.image.created=$(date '+%Y-%m-%dT%H:%M:%S%:z')" \
      #       --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
      #       --label "org.opencontainers.image.revision=${{ github.sha }}" \
      #       \
      #       --label "io.artifacthub.package.readme-url=${{ inputs.DOCKER_LABEL_ARTIFACTHUB_README }}" \
      #       --label 'io.artifacthub.package.maintainers=${{ inputs.DOCKER_LABEL_ARTIFACTHUB_MAINTAINER }}' \
      #       \
      #       --annotation "org.opencontainers.image.description=a DESCRIPTION for multi-arch images" \
      #       --annotation "org.opencontainers.image.created=$(date '+%Y-%m-%dT%H:%M:%S%:z')" \
      #       --annotation "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
      #       --annotation "org.opencontainers.image.revision=${{ github.sha }}" \
      #     --push \
      #     --file ${{ inputs.DOCKER_FILE }} \
      #     --tag ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }};


      # - name: Remove "Unknown" Image from Manifest
      #   shell: bash
      #   if: ${{ github.ref_type != 'tag' }}
      #   run: |

      #     DOCKER_MULTI_ARCH_IMAGES=$(docker buildx imagetools inspect "${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}" --format "{{ range .Manifest.Manifests }}{{ if ne (print .Platform) \"&{unknown unknown  [] }\" }}${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}@{{ println .Digest }}{{end}} {{end}}");

      #     docker buildx imagetools create $DOCKER_MULTI_ARCH_IMAGES \
      #       --tag ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }} \
      #       --tag ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:dev;


      # - name: Fetch image
      #   shell: bash
      #   run: |
      #     docker pull ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }} >> /dev/null;


      # - name: Fetch Manifest digest
      #   shell: bash
      #   id: image-digest
      #   run: |
      #     echo "value-out=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }} | cut -d '@' -f 2)" >> $GITHUB_OUTPUT


      # - name: Attest
      #   if: ${{
      #       github.ref_name == 'development'
      #         ||
      #       github.ref_name == 'master'
      #         ||
      #       github.ref_type == 'tag'
      #     }}
      #   uses: actions/attest-build-provenance@v1
      #   id: image-attest
      #   with:
      #     subject-name: ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}
      #     subject-digest: ${{ steps.image-digest.outputs.value-out }}
      #     push-to-registry: true


      # - name: Upload Image Attestation Artifact
      #   if: ${{
      #       github.ref_name == 'development'
      #         ||
      #       github.ref_name == 'master'
      #         ||
      #       github.ref_type == 'tag'
      #     }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-image
      #     path: ${{ steps.image-attest.outputs.bundle-path }}


      # - name: Cleanup BuildX
      #   shell: bash
      #   if: ${{ github.ref_type != 'tag' }}
      #   run: |
      #     docker buildx rm project-v3-builder;

branding:
  icon: 'activity'
  color: 'blue'
